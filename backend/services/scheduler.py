# services/scheduler.py
import asyncio
import logging
from concurrent.futures import ProcessPoolExecutor
from typing import Dict, List
from datetime import datetime
import traceback

from .parsers import parse
from .forecasting import forecast

class Scheduler:
    def __init__(self, tasks_config: List[Dict], process_pool: ProcessPoolExecutor):
        """
        –ü–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫ —Å –∑–∞–ø—É—Å–∫–æ–º –∑–∞–¥–∞—á –≤ –ø—Ä–æ—Ü–µ—Å—Å–∞—Ö
        
        :param tasks_config: –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –∑–∞–¥–∞—á
        :param process_pool: –ü—É–ª –ø—Ä–æ—Ü–µ—Å—Å–æ–≤ –¥–ª—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –∑–∞–¥–∞—á
        """
        self.tasks_config = tasks_config
        self.process_pool = process_pool
        self._running_tasks = []
        self._shutdown_event = asyncio.Event()

    async def start(self):
        """–ê—Å–∏–Ω—Ö—Ä–æ–Ω–Ω—ã–π –∑–∞–ø—É—Å–∫ –≤—Å–µ—Ö –∑–∞–¥–∞—á"""
        print(f"üöÄ Starting scheduler with {len(self.tasks_config)} tasks")
        
        for task_config in self.tasks_config:
            task = asyncio.create_task(
                self._process_task_wrapper(task_config)
            )
            self._running_tasks.append(task)
            
        print("‚úÖ All tasks running in background")

    async def _process_task_wrapper(self, task_config: Dict):
        """–û–±–µ—Ä—Ç–∫–∞ –¥–ª—è –∑–∞–ø—É—Å–∫–∞ –∑–∞–¥–∞—á–∏ –≤ –ø—Ä–æ—Ü–µ—Å—Å–µ"""
        loop = asyncio.get_running_loop()
        print("Wrapper:", task_config['name'])

        while not self._shutdown_event.is_set():
            try:
                start_time = loop.time()
                await loop.run_in_executor(
                    self.process_pool,
                    self._process_task,
                    task_config
                )    
                execution_time = loop.time() - start_time
                sleep_time = max(0, task_config['schedule']['pooling_interval'] - execution_time)
                await asyncio.sleep(sleep_time)
                    
            except Exception as e:
                print(f"‚ö†Ô∏è Task '{task_config['name']}' failed: {str(e)}")
                print(traceback.format_exc())
                print(f"üîÑ Retrying in {task_config['schedule']['retry_cooldown']}s...")
                await asyncio.sleep(task_config['schedule']['retry_cooldown'])

    @staticmethod
    def _process_task(task_config: Dict) -> bool:
        """
        –û—Å–Ω–æ–≤–Ω–∞—è –ª–æ–≥–∏–∫–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –∑–∞–¥–∞—á–∏ –≤ –ø—Ä–æ—Ü–µ—Å—Å–µ
        
        –ü–∞—Ä–∞–º–µ—Ç—Ä—ã:
            task_config: –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –∑–∞–¥–∞—á–∏ —Å –ø–∞—Ä–∞–º–µ—Ç—Ä–∞–º–∏ –ø–∞—Ä—Å–µ—Ä–∞ –∏ –º–æ–¥–µ–ª–∏
            
        –ò—Å–∫–ª—é—á–µ–Ω–∏—è:
            ValueError: –ü—Ä–∏ –æ—à–∏–±–∫–∞—Ö –ø–∞—Ä—Å–∏–Ω–≥–∞ –∏–ª–∏ –ø—Ä–æ–≥–Ω–æ–∑–∏—Ä–æ–≤–∞–Ω–∏—è
        """
        print(f"üîß Processing task '{task_config['name']}' at {datetime.now().isoformat()}")
        
        try:
            print(task_config)
            parsed_data = parse(
                parser_type=task_config['parser']['type'],
                params=task_config['parser']['params']
            )
            forecast_result = forecast(
                data=parsed_data,
                model_type=task_config['model']['type'],
                settings=task_config['model']['params']
            ) 
            # print(f"üìä Task '{task_config['name']}' completed successfully", forecast_result)
            # –î–æ–±–∞–≤–∏—Ç—å —Ç—É—Ç –ª–æ–≥–∏–∫—É –¥–æ–±–∞–≤–ª–µ–Ω–∏—è —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö

        except Exception as e:
            print(f"‚ùå Task '{task_config['name']}' failed during execution")
            raise 
        
    async def stop(self):
        """–ö–æ—Ä—Ä–µ–∫—Ç–Ω–∞—è –æ—Å—Ç–∞–Ω–æ–≤–∫–∞ –≤—Å–µ—Ö –∑–∞–¥–∞—á"""
        print("üõë Stopping scheduler...")
        self._shutdown_event.set()
        
        for task in self._running_tasks:
            task.cancel()
        
        await asyncio.gather(*self._running_tasks, return_exceptions=True)
        self._running_tasks = []
        print("‚úÖ Scheduler stopped")